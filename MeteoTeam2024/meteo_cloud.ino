// Adafruit LPS35HW - Version: Latest 

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 3"
  https://create.arduino.cc/cloud/things/c46ee676-fc85-4fea-89cd-f953125d83e9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float h30;
  float hfs400;
  float hlps45;
  float pressureLPS35hw;
  float t30;
  float tfs400;
  float tLPS35hw;
  float tlps45;
  int sensorValue;
  float analogTemp;
  float analogTemp2;
  float latitude;
  float longitude;
  String date;
  String time;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Adafruit_LPS35HW.h>
#include <Adafruit_SHT31.h>
#include <Adafruit_SHT4x.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Create instances for the sensors
Adafruit_SHT31 sht30; // Sensor SHT30 for soil
Adafruit_LPS35HW lps35hw; // Sensor LPS35HW
Adafruit_SHT4x sht4; // Sensor SHT4x
Adafruit_SHT31 sht31; // Another instance of SHT31

const byte muxAddress = 0x70;
#define ONE_WIRE_BUS 11
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature dallasTempSensor(&oneWire);

// GPS
static const int TXPin = 4, RXPin = 3;
static const uint32_t GPSBaud = 9600;
TinyGPSPlus gps;
SoftwareSerial ss(RXPin, TXPin);

void TCA9548A(uint8_t bus) {
  Wire.beginTransmission(muxAddress);  // Start I2C transmission to TCA9548A
  Wire.write(1 << bus);                // Send byte to select bus
  Wire.endTransmission();              // Stop I2C transmission
}

void setup() {
  Serial.begin(115200);
  delay(1500);  // Wait for Serial Monitor

  initProperties(); // Initialize Arduino IoT Cloud properties
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  Wire.begin(); // Initialize I2C communication

  // Initialize all sensors on their respective buses
  TCA9548A(0);
  if (!sht30.begin(0x44)) {
    Serial.println("Could not find a valid SHT30 sensor on bus 0, check wiring!");
    while (1);
  }

  TCA9548A(1);
  if (!lps35hw.begin_I2C(0x5d)) {
    Serial.println("Could not find a valid LPS35HW sensor on bus 1, check wiring!");
    while (1);
  }

  TCA9548A(2);
  if (!sht4.begin()) {
    Serial.println("Could not find a valid SHT4 sensor on bus 2, check wiring!");
    while (1);
  }

  TCA9548A(3);
  if (!sht31.begin(0x44)) {
    Serial.println("Could not find a valid SHT31 sensor on bus 3, check wiring!");
    while (1);
  }

  dallasTempSensor.begin(); // Initialize Dallas DS18B20 temperature sensor

  ss.begin(GPSBaud); // Initialize GPS
  Serial.println(F("DeviceExample.ino"));
  Serial.println(F("A simple demonstration of TinyGPS++ with an attached GPS module"));
  Serial.print(F("Testing TinyGPS++ library v. ")); Serial.println(TinyGPSPlus::libraryVersion());
  Serial.println(F("by Mikal Hart"));
  Serial.println();
}

void loop() {
  ArduinoCloud.update();  // Handle cloud communication

  sensorValue = analogRead(15); // Read from an analog pin
  Serial.print("Analog sensor value: ");
  Serial.println(sensorValue);

  // Request temperature from Dallas DS18B20 sensors
  dallasTempSensor.requestTemperatures();
  analogTemp = dallasTempSensor.getTempCByIndex(0);  // Update global variable for the first sensor
  analogTemp2 = dallasTempSensor.getTempCByIndex(1);  // Update global variable for the second sensor
  Serial.print("Dallas temperature sensor 1 value: ");
  Serial.println(analogTemp);
  Serial.print("Dallas temperature sensor 2 value: ");
  Serial.println(analogTemp2);

  // Read and update from all sensors, make sure to update the cloud variables
  TCA9548A(0);
  t30 = sht30.readTemperature();
  h30 = sht30.readHumidity();
  printSensorData("SHT30", t30, h30);

  TCA9548A(1);
  tLPS35hw = lps35hw.readTemperature();
  pressureLPS35hw = lps35hw.readPressure();
  printSensorData("LPS35HW", tLPS35hw, pressureLPS35hw);

  TCA9548A(2);
  sensors_event_t hum_event, temp_event;
  sht4.getEvent(&hum_event, &temp_event); // Getting temperature and humidity
  tlps45 = temp_event.temperature;
  hlps45 = hum_event.relative_humidity;
  printSensorData("SHT4x", tlps45, hlps45);

  TCA9548A(3);
  tfs400 = sht31.readTemperature();
  hfs400 = sht31.readHumidity();
  printSensorData("SHT31", tfs400, hfs400);

  while (ss.available() > 0) {
    if (gps.encode(ss.read())) {
      displayGPSInfo();
    }
  }

  if (millis() > 5000 && gps.charsProcessed() < 10) {
    Serial.println(F("No GPS detected: check wiring."));
    while (true);
  }

  delay(2000); // Delay to reduce the frequency of cloud updates
}

void printSensorData(const String& sensorName, float temperature, float humidity) {
  if (!isnan(temperature)) {
    Serial.print(sensorName + " Temperature: ");
    Serial.print(temperature);
    Serial.println(" *C");
  } else {
    Serial.println("Failed to read temperature from " + sensorName);
  }

  if (!isnan(humidity)) {
    Serial.print(sensorName + " Humidity: ");
    Serial.print(humidity);
    Serial.println(" %");
  } else {
    Serial.println("Failed to read humidity from " + sensorName);
  }
}

void displayGPSInfo() {
  Serial.print(F("Location: "));
  if (gps.location.isValid()) {
    latitude = gps.location.lat();
    longitude = gps.location.lng();
    Serial.print(latitude, 6);
    Serial.print(F(","));
    Serial.print(longitude, 6);
  } else {
    Serial.print(F("INVALID"));
  }

  Serial.println();
}
