{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Dell\\\\ReactNative2021\\\\SWITCH\\\\vesna-smart-greenhouse\\\\app\\\\screens\\\\Weather.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nvar URL = 'https://openweathermap.org/data/2.5/weather';\nvar API_KEY = '5ed1e7c706726d5a0db62141a7cd192d';\n\nvar fetchWeather = function fetchWeather(query) {\n  var _await$axios$get, data;\n\n  return _regeneratorRuntime.async(function fetchWeather$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get(URL, {\n            params: {\n              q: query,\n              units: 'metric',\n              APPID: API_KEY\n            }\n          }));\n\n        case 2:\n          _await$axios$get = _context.sent;\n          data = _await$axios$get.data;\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar Weather = function Weather() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      weather = _useState4[0],\n      setWeather = _useState4[1];\n\n  var search = function search(e) {\n    var data;\n    return _regeneratorRuntime.async(function search$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(e.key === 'Enter')) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetchWeather(query));\n\n          case 3:\n            data = _context2.sent;\n            setWeather(data);\n            setQuery('');\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"main-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"search\",\n    placeholder: \"Search...\",\n    value: query,\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    onKeyPress: search,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), weather.main && React.createElement(\"div\", {\n    className: \"city\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, React.createElement(\"h2\", {\n    className: \"city-name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, weather.name), React.createElement(\"sup\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, weather.sys.country)), React.createElement(\"div\", {\n    className: \"city-temp\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, Math.round(weather.main.temp), React.createElement(\"sup\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, \"\\xB0C\")), React.createElement(\"div\", {\n    className: \"info\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, React.createElement(\"img\", {\n    className: \"city-icon\",\n    src: \"https://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\",\n    alt: weather.weather[0].description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }), React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, weather.weather[0].description))));\n};\n\nexport default Weather();","map":{"version":3,"sources":["C:/Users/Dell/ReactNative2021/SWITCH/vesna-smart-greenhouse/app/screens/Weather.js"],"names":["React","useState","axios","URL","API_KEY","fetchWeather","query","get","params","q","units","APPID","data","Weather","setQuery","weather","setWeather","search","e","key","target","value","main","name","sys","country","Math","round","temp","icon","description"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\n\r\nconst URL = 'https://openweathermap.org/data/2.5/weather';\r\nconst API_KEY = '5ed1e7c706726d5a0db62141a7cd192d'\r\nconst fetchWeather = async(query) => {\r\n    const {data} = await axios.get(URL, {\r\n        params: {\r\n            q: query,\r\n            units: 'metric',\r\n            APPID: API_KEY,\r\n        }\r\n    });\r\n}\r\nconst Weather = () => {\r\n    const [query, setQuery] = useState('');\r\n    const [weather, setWeather] = useState({});\r\n    \r\n    const search = async (e) => {\r\n        if(e.key === 'Enter') {\r\n            const data = await fetchWeather(query);\r\n    \r\n            setWeather(data);\r\n            setQuery('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <input type=\"text\"className=\"search\"placeholder=\"Search...\"value={query}onChange={(e) => setQuery(e.target.value)}onKeyPress={search}/>\r\n            {weather.main && (\r\n                <div className=\"city\">\r\n                    <h2 className=\"city-name\">\r\n                        <span>{weather.name}</span>\r\n                        <sup>{weather.sys.country}</sup>\r\n                    </h2>\r\n                    <div className=\"city-temp\">\r\n                        {Math.round(weather.main.temp)}\r\n                        <sup>&deg;C</sup>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\r\n                        <p>{weather.weather[0].description}</p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Weather();\r\n"]},"metadata":{},"sourceType":"module"}